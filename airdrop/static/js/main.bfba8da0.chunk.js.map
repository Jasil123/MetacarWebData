{"version":3,"sources":["candy-machine.ts","connection.tsx","utils/checkWLToken.ts","MintCountdown.tsx","Header.tsx","MintButton.tsx","Home.tsx","hooks/usePoller.js","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","presale","whitelistMintSettings","goLiveDate","Date","getTime","id","isSoldOut","isActive","endSettings","endSettingType","date","number","isPresale","treasury","wallet","tokenMint","gatekeeper","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","TOKEN_PUBKEY","checkWLToken","userAddress","wltTokenAddress","filter","memcmp","offset","bytes","toBase58","programAccountsConfig","filters","dataSize","getProgramAccounts","_listOfTokens","arrayOfTokens","_mint","userHasWhitelistToken","includes","useStyles","styled","div","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","MintCountdown","style","refreshCandyMachineState","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","Header","Grid","container","direction","wrap","Typography","variant","getMintPrice","toDate","formatNumber","asNumber","discountPrice","CTAButton","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","disabled","onClick","CircularProgress","require","ConnectButton","WalletDialogButton","StyledPaper","MintContainer","Home","props","animatedBg","setAnimatedBg","isUserMinting","setIsUserMinting","setCandyMachine","setUserHasWhitelistToken","open","severity","alertState","setAlertState","loading","setLoading","rpcUrl","rpcHost","useWallet","useMemo","signTransaction","useCallback","cndy","WLToken","fn","delay","savedCallback","useRef","current","setInterval","clearInterval","usePoller","document","getElementById","click","connected","mintTxId","txTimeout","confetti","particleCount","spread","origin","y","msg","code","window","location","reload","indexOf","src","alt","Box","minHeight","Container","maxWidth","position","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","getCandyMachineId","network","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","startDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","LAMPORTS_PER_SOL","buyer"],"mappings":"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","file":"static/js/main.bfba8da0.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | [number, anchor.BN];\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  const presale =\n    state.data.whitelistMintSettings &&\n    state.data.whitelistMintSettings.presale &&\n    (!state.data.goLiveDate ||\n      state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        (presale ||\n          state.data.goLiveDate?.toNumber() < new Date().getTime() / 1000) &&\n        (state.data.endSettings\n          ? state.data.endSettings.endSettingType.date\n            ? state.data.endSettings.number.toNumber() >\n              new Date().getTime() / 1000\n            : itemsRedeemed < state.data.endSettings.number.toNumber()\n          : true),\n      isPresale: presale,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {\n  PublicKey,\n  Connection,\n  GetProgramAccountsConfig,\n  GetProgramAccountsFilter,\n  MemcmpFilter,\n  DataSizeFilter,\n} from \"@solana/web3.js\";\n// @ts-ignore\nimport fetch from \"node-fetch\";\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\n\nvar tempData: any;\n\n/* const METADATA_PUBKEY = new PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n) */\nconst TOKEN_PUBKEY = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\n//export async function getNft()\n\nexport const checkWLToken = async (\n  connection: Connection,\n  userAddress: any,\n  wltTokenAddress: any\n): Promise<any> => {\n  try {\n    let filter: MemcmpFilter = {\n      memcmp: {\n        offset: 32,\n        bytes: userAddress?.toBase58(),\n      },\n    };\n    let filter2: DataSizeFilter = {\n      dataSize: 165,\n    };\n    let getFilter: GetProgramAccountsFilter[] = [filter, filter2];\n    let programAccountsConfig: GetProgramAccountsConfig = {\n      filters: getFilter,\n    };\n    let _listOfTokens = await connection.getProgramAccounts(\n      TOKEN_PUBKEY,\n      programAccountsConfig\n    );\n\n    // we get frist 32 bytes as per\n    // https://github.com/solana-labs/solana-program-library/blob/08d9999f997a8bf38719679be9d572f119d0d960/token/program/src/state.rs#L86-L106\n    // mint is the first hence we start at 0 byte\n    let arrayOfTokens = [];\n    for (let i = 0; i < _listOfTokens.length; i++) {\n      let _mint = new PublicKey(\n        _listOfTokens[i][\"account\"][\"data\"].slice(0, 32)\n      );\n\n      arrayOfTokens.push(_mint.toBase58());\n    }\n\n    let userHasWhitelistToken;\n    arrayOfTokens.includes(wltTokenAddress.toBase58())\n      ? (userHasWhitelistToken = true)\n      : (userHasWhitelistToken = false);\n\n    return userHasWhitelistToken;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n//getNft()\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport styled from \"styled-components\"\n\nconst MintContainer = styled.div``; // add your owns styles here\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.5),\n        marginRight: 0,\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: theme.spacing(1),\n      marginRight: 0,\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n  refreshCandyMachineState: any;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n  refreshCandyMachineState\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={() => refreshCandyMachineState()}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import * as anchor from \"@project-serum/anchor\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { toDate, formatNumber } from \"./utils\";\nimport { CandyMachineAccount } from \"./candy-machine\";\n\ntype HeaderProps = {\n  candyMachine?: CandyMachineAccount;\n};\n\nexport const Header = ({\n  candyMachine,\n  refreshCandyMachineState,\n}: {\n  candyMachine?: CandyMachineAccount;\n  refreshCandyMachineState: any;\n}) => {\n  return (\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\n      <Grid container direction=\"row\" wrap=\"nowrap\">\n        {candyMachine && (\n          <Grid container direction=\"row\" wrap=\"nowrap\">\n            <Grid container direction=\"column\">\n              <Typography variant=\"body2\" style={{ color: \"#614014\" }}>\n                Remaining\n              </Typography>\n              <Typography\n                variant=\"h6\"\n                style={{\n                  fontWeight: \"bold\",\n                  color: \"#614014\",\n                }}\n              >\n                {`${candyMachine?.state.itemsRemaining}`}\n              </Typography>\n            </Grid>\n            <Grid container direction=\"column\">\n              <Typography variant=\"body2\" style={{ color: \"#614014\" }}>\n                Price\n              </Typography>\n              <Typography\n                variant=\"h6\"\n                style={{ fontWeight: \"bold\", color: \"#614014\" }}\n              >\n                {getMintPrice(candyMachine)}\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n        <MintCountdown\n          date={toDate(\n            candyMachine?.state.goLiveDate\n              ? candyMachine?.state.goLiveDate\n              : candyMachine?.state.isPresale\n              ? new anchor.BN(new Date().getTime() / 1000)\n              : undefined\n          )}\n          style={{ justifyContent: \"flex-end\" }}\n          status={\n            !candyMachine?.state?.isActive || candyMachine?.state?.isSoldOut\n              ? \"COMPLETED\"\n              : candyMachine?.state.isPresale\n              ? \"PRESALE\"\n              : \"LIVE\"\n          }\n          refreshCandyMachineState={refreshCandyMachineState}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nconst getMintPrice = (candyMachine: CandyMachineAccount): string => {\n  const price = formatNumber.asNumber(\n    candyMachine.state.isPresale &&\n      candyMachine.state.whitelistMintSettings?.discountPrice\n      ? candyMachine.state.whitelistMintSettings?.discountPrice!\n      : candyMachine.state.price!\n  );\n  return `◎ ${price}`;\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState } from \"react\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(29deg, #fe4a49 0%, #aeeeb2 100%);\n  color: #614014;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  userHasWhitelistToken,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  userHasWhitelistToken: boolean;\n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (!userHasWhitelistToken && candyMachine?.state.isPresale) {\n      return \"NO WL TOKENS\";\n    } else if (candyMachine?.state.isPresale) {\n      return \"PRESALE MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  return (\n    <CTAButton\n      disabled={\n        candyMachine?.state.isSoldOut ||\n        isMinting ||\n        !candyMachine?.state.isActive ||\n        (!userHasWhitelistToken && candyMachine?.state.isPresale)\n      }\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            setClicked(true);\n          } else {\n            await requestGatewayToken();\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n","import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar, CircularProgress, Box } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from \"./candy-machine\";\nimport { AlertState } from \"./utils\";\nimport { checkWLToken } from \"./utils/checkWLToken\";\nimport { Header } from \"./Header\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { usePoller } from \"./hooks/usePoller\";\n//@ts-ignore\nimport confetti from \"canvas-confetti\";\nrequire(\"./Bg.css\");\nconst IMAGE_LINK = \"/animation.gif\";\nconst LOGO_LINK = \"/logo.png\";\n\nfunction throwConfetti(): void {\n  confetti({\n    particleCount: 200,\n    spread: 70,\n    origin: { y: 0.6 },\n  });\n}\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(29deg, #fe4a49 0%, #aeeeb2 100%);\n  color: #614014;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst StyledPaper = styled(Paper)`\n  padding: 20px;\n  background-color: #eed2ae;\n  border-radius: 6px;\n  margin: 10px;\n  -webkit-box-shadow: 8px 8px 71px 0px rgba(83, 66, 90, 1);\n  -moz-box-shadow: 8px 8px 71px 0px rgba(83, 66, 90, 1);\n  box-shadow: 8px 8px 71px 0px rgba(83, 66, 90, 1);\n`;\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [animatedBg, setAnimatedBg] = useState(false);\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [userHasWhitelistToken, setUserHasWhitelistToken] = useState(false);\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [loading, setLoading] = useState(true);\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n        setCandyMachine(cndy);\n        let WLToken = await checkWLToken(\n          props.connection,\n          anchorWallet.publicKey,\n          cndy?.state?.whitelistMintSettings?.mint\n        );\n        WLToken\n          ? setUserHasWhitelistToken(true)\n          : setUserHasWhitelistToken(false);\n        setLoading(false);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n  var pollTime;\n  usePoller(\n    () => {\n      refreshCandyMachineState();\n    },\n    pollTime ? pollTime : 9999\n  );\n  const onMint = async () => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n\n        if (status && !status.err) {\n          throwConfetti();\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <>\n      {animatedBg && <div className=\"section section--featured\">\n        <div className=\"row-container\">\n          <div className=\"line\">\n            <div>\n              <div className=\"row\">\n                <img src=\"line-3-min.png\" alt=\"\" />\n              </div>\n              <div className=\"row\">\n                <img src=\"line-3-min.png\" alt=\"\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"line second\">\n            <div>\n              <div className=\"row\">\n                <img src=\"line-1-min.png\" alt=\"\" />\n              </div>\n              <div className=\"row\">\n                <img src=\"line-1-min.png\" alt=\"\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"line third\">\n            <div>\n              <div className=\"row\">\n                <img src=\"line-3-min.png\" alt=\"\" />\n              </div>\n              <div className=\"row\">\n                <img src=\"line-3-min.png\" alt=\"\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"shadow\">\n          <span></span>\n        </div>\n      </div>}\n      <Box style={{ minHeight: \"100vh\", display: \"flex\" }} alignItems=\"center\">\n        <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n          <StyledPaper>\n            {\" \"}\n            <img\n              src={LOGO_LINK}\n              alt=\"\"\n              width=\"100%\"\n              style={{ borderRadius: \"5px\" }}\n              onClick={()=> setAnimatedBg(!animatedBg)}\n            />\n          </StyledPaper>\n          <StyledPaper>\n            <div>\n              <img\n                src={IMAGE_LINK}\n                alt=\"\"\n                width=\"100%\"\n                style={{ borderRadius: \"5px\" }}\n              />\n            </div>\n          </StyledPaper>\n\n          <StyledPaper>\n            {!wallet.connected ? (\n              <ConnectButton>Connect Wallet</ConnectButton>\n            ) : loading ? (\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  width: \"100%\",\n                }}\n              >\n                <CircularProgress />\n              </div>\n            ) : (\n              <>\n                <Header\n                  candyMachine={candyMachine}\n                  refreshCandyMachineState={refreshCandyMachineState}\n                />\n                <MintContainer>\n                  {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                    <GatewayProvider\n                      wallet={{\n                        publicKey:\n                          wallet.publicKey ||\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\n                        //@ts-ignore\n                        signTransaction: wallet.signTransaction,\n                      }}\n                      gatekeeperNetwork={\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                      }\n                      clusterUrl={rpcUrl}\n                      options={{ autoShowModal: false }}\n                    >\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isUserMinting}\n                        onMint={onMint}\n                        userHasWhitelistToken={userHasWhitelistToken}\n                      />\n                    </GatewayProvider>\n                  ) : (\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      onMint={onMint}\n                      userHasWhitelistToken={userHasWhitelistToken}\n                    />\n                  )}\n                </MintContainer>\n              </>\n            )}\n          </StyledPaper>\n        </Container>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n","import { useEffect, useRef } from 'react';\nexport function usePoller(fn, delay) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  //run at start too\n  useEffect(() => {\n    fn()\n  }, []);\n}\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\n\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost\n  ? rpcHost\n  : anchor.web3.clusterApiUrl('devnet'));\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              startDate={startDateSeed}\n              txTimeout={txTimeoutInMilliseconds}\n              rpcHost={rpcHost}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"],"sourceRoot":""}